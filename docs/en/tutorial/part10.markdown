Tutorial Part 10. Testing your application via HTTP
====================================================

Functions and macros to test your application via HTTP
-------------------------------------------------------
- [with-new-cookie](http://web4r.org/en/api#with-new-cookie): Executes arguments with a new cookie.
- [http-regist](http://web4r.org/en/api#http-regist): Registers a new user via HTTP.
- [http-test-regist](http://web4r.org/en/api#http-test-regist): Executes http-regist and test the result.
- [http-login](http://web4r.org/en/api#http-login): Logs in a user via HTTP.
- [http-test-login](http://web4r.org/en/api#http-test-login): Executes http-login and test the result.
- [http-logout](http://web4r.org/en/api#http-logout): Logs out a user via HTTP.
- [http-test-logout](http://web4r.org/en/api#http-test-logout): Executes http-logout and test the result.
- [http-make-instance](http://web4r.org/en/api#http-make-instance): Makes an instance via HTTP.
- [http-test-make-instance](http://web4r.org/en/api#http-test-make-instance): Executes http-make-instance and test the result.
- [http-update-instance](http://web4r.org/en/api#http-update-instance): Updates an instance via HTTP.
- [http-test-update-instance](http://web4r.org/en/api#http-test-update-instance): Executes http-update-instance and test the result.
- [http-get-instance-by-oid](http://web4r.org/en/api#http-get-instance-by-oid): Gets slot values of an instance by oid via HTTP.
- [http-test-get-instance-by-oid](http://web4r.org/en/api#http-test-get-instance-by-oid): Executes http-get-instance-by-oid and test the result.
- [http-drop-instance-by-oid](http://web4r.org/en/api#http-drop-instance-by-oid): Drops an instance by oid via HTTP.
- [http-test-drop-instance-by-oid](http://web4r.org/en/api#http-test-drop-instance-by-oid): Executes http-drop-instance-by-oid and test the result.

Test macro
-----------
- (test (http-regist &rest args)) is equivalent to `(http-test-regist ,@args))
- (test (http-login &rest args))  is equivalent to `(http-test-login ,@args))
- (test (http-logout &rest args)) is equivalent to `(http-test-logout ,@args))
- (test (http-make-instance &rest args)) is equivalent to `(http-test-make-instance ,@args))
- (test (http-update-instance &rest args)) is equivalent to `(http-test-update-instance ,@args))
- (test (http-get-instance-by-oid &rest args)) is equivalent to `(http-test-get-instance-by-oid ,@args))
- (test (http-drop-instance-by-oid &rest args)) is equivalent to `(http-test-drop-instance-by-oid ,@args))

Testing an application generated by genpages macro
---------------------------------------------------

### application codes

    (eval-when (:compile-toplevel :load-toplevel :execute)
      (asdf:oos 'asdf:load-op :web4r))
    
    (in-package :cl-user)
    (defpackage :wiki (:use :cl :web4r))
    (in-package :wiki)
    
    (ele:open-store *example-bdb*)
    
    (defpclass wiki ()
      ((title :length 256 :index t)
       (body  :length 3000)))
    (genpages wiki)
    
    (start-server)

### test codes

    (let ((class 'wiki))
      (with-new-cookie
        (let ((oid (test (http-make-instance class :title "title1" :body "body1"))))
          (test (http-get-instance-by-oid class oid))
          (test (http-update-instance class oid '((title . "title1c") (body . "body1c"))))
          (test (http-drop-instance-by-oid class oid)))))

Testing the blog application made in the [Tutorial Part 9](http://web4r.org/en/tutorial9)
------------------------------------------------------------------------------------------

### test codes

    (let ((class 'blog)
          (id   "user1")
          (pass "pass1"))
      (with-new-cookie
        (test (http-regist `((id    . ,id)
                             (pass  . ,pass)
                             (email . "1@1.com")
                             (blog-title . "user1's blog"))))
        (test (http-login :id id :pass pass))
        (let ((oid (test (http-make-instance class :title "title1" :body "body1"))))
          (test (http-get-instance-by-oid class oid))
          (test (http-update-instance class oid '((title . "title1c") (body . "body1c"))))
          (test (http-drop-instance-by-oid class oid)))
        (test (http-logout))))

Debug mode
-----------
[debug-mode-on](http://web4r.org/en/api#debug-mode-on) turns debug mode on and [debug-mode-off](http://web4r.org/en/api#debug-mode-off) turns it off.  

Debug mode does two things when lisp errors happen.

1. Show lisp errors as html via HTTP
2. Write lisp errors and its back traces to [\*debug-log-file\*](http://web4r.org/en/api#*debug-log-file*)
